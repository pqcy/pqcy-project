<!DOCTYPE html>
<html>
  <head>
    <%-include('../partials/head.ejs')%>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Jua&display=swap');
      /*
      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&display=swap');
      body {
        font-family: 'Noto Sans KR', sans-serif;
      }
      */
      #wrapper {
        font-family: 'Jua', sans-serif;
        height: auto;
        min-height: 100%;
        padding-bottom: 400px;
      }
      button {
        position: relative;
        border: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #6aafe6;
        color: #ffffff;
      }
      button:focus {
        position: relative;
        border: none;
        outline: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #ffffff;
        color: black;
      }
      button:active {
        position: relative;
        border: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #ffffff;
        color: black;
      }
      .text {
        text-decoration: underline;
        text-decoration-color: black;
        color: #5497ce;
      }
    </style>
  </head>
  <body>
    <%-include('../partials/nav.ejs')%>

    <div id="wrapper"> <!-- footer 설정용 -->
    <br/><br/><br/><br/><br/><br/>

      <div class="container" data-aos="fade-up">
        <header class="section-header" style="text-align: center;">
          <h3>공개키 탑재 가이드</h3>
          <hr class="my-4">
          <p style="font-size: 20px;">
            본 가이드는 OpenSSL에 양자내성암호(이하 PQC)를 적용하기 위한 가이드입니다.<br/><br/>
            현재 OpenSSL에 대칭키를 탑재하는 방법은 상당 수 알려져 있으나, 그에 비해 공개키를 탑재하는 방법에 대하여는 알려진 바가 적습니다.<br/>
            따라서 OpenSSL 코드 분석 및 OpenSSL에 PQC를 탑재한 여러 프로젝트, 그리고 논문을 참고하여
            OpenSSL에 공개키를 탑재하는 방법을 작성하였습니다.
            특히나 본 가이드는 다가올 양자 컴퓨터의 시대에 대비하여 OpenSSL에 PQC를 적용하는 것에 집중하고 있습니다.<br/><br/>
            SSL(TLS) 통신에서 PQC를 적용하고자 한다면 두 가지의 가이드가 필요할 것입니다.
            하나는 PQC 서명 알고리즘에 대한 탑재 가이드이고, 하나는 PQC KEM에 대한 탑재 가이드입니다.<br/><br/>
            본 가이드에서는 두 가지 모두 제공합니다.
          </p>
        </header>
      </div>

      <br/><br/>


      <div class="container row" style="float: none; margin: 100 auto;">
        <div class="col-md-3" style="float: none; margin: 0 auto;">
          <div class="card text-center" style="width: 25rem;">
            <div class="card-body">
              <h5 class="card-title">공개키 탑재 가이드</h5>
              <p class="card-text">
                <br/>
                <span class="text">PQC 서명 알고리즘 탑재 가이드</span> 입니다.
                <br/><br/><br/><br/>
              </p>
              <!-- 커스텀 버튼 생성하기-->
              <span data-toggle="collapse" href="#sig" aria-expanded="false" aria-controls="sig">
                <button>&nbsp;gogo!&nbsp;</button>
              </span>
            </div>
          </div>
        </div>
        <div class="col-md-3" style="float: none; margin: 0 auto;">
          <div class="card text-center" style="width: 25rem;">
            <div class="card-body">
              <h5 class="card-title">공개키 탑재 가이드</h5>
              <p class="card-text">
                <br/>
                <span class="text">PQC KEM 탑재 가이드</span> 입니다.
                <br/><br/><br/><br/>
              </p>
              <span data-toggle="collapse" href="#kem" aria-expanded="false" aria-controls="kem">
                <button>&nbsp;gogo!&nbsp;</button>
              </span>
            </div>
          </div>
        </div>
      </div>


      <br/><br/>


      <div class="collapse" id="sig">
        <div class="jumbotron">
          <h1 class="display-5">PQC 서명 알고리즘 탑재 가이드</h1>
          <hr class="my-4">
          <p class="lead">
            <span style="font-size: 25px;">인증서 발급 과정</span><br/><br/>
            OpenSSL에서 SSL 인증서를 발급받는 과정은 다음과 같습니다.<br/>
            &nbsp;&nbsp;1. 서명 알고리즘의 키 쌍을 생성<br/>
            &nbsp;&nbsp;2. 키를 사용해 서버의 정보가 담긴 CSR 파일을 생성, 인증 기관(이하 CA)에 전송<br/>
            &nbsp;&nbsp;3. CA에서 서명 및 인증서 발급, 서버로 전송<br/><br/>
            일반적으로 서명을 할 때 RSA 알고리즘을 사용하기 때문에 위의 과정은 아래의 openssl 명령어로 이루어지게 됩니다.<br/>
            (명령어 : 예시 : 설명)<br/><br/>
            &nbsp;&nbsp;1. genrsa : openssl genrsa -out server.key 2048 : rsa 키 쌍 생성<br/>
            &nbsp;&nbsp;2. req : openssl req -new -key server.key -out server.csr : 키를 사용해 CSR 파일 생성<br/>
            &nbsp;&nbsp;3. x509 : openssl
          </p>
      
        </div>
      </div>


      <div class="collapse" id="kem">
        <div class="jumbotron">
          <h1 class="display-5">PQC KEM 탑재 가이드</h1>
          <hr class="my-4">
          <p class="lead">
            abcdefg
          </p>
      
        </div>
      </div>




    </div>

    <br/><br/><br/><br/>

    <%-include('../partials/footer.ejs')%>
  </body>
</html>