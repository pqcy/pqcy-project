<!DOCTYPE html>
<html>
  <head>
    <%-include('../partials/head.ejs')%>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Jua&display=swap');
      /*
      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@500&display=swap');
      body {
        font-family: 'Noto Sans KR', sans-serif;
      }
      */
      #wrapper {
        font-family: 'Jua', sans-serif;
        height: auto;
        min-height: 100%;
        padding-bottom: 400px;
      }
      button {
        position: relative;
        border: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #6aafe6;
        color: #ffffff;
      }
      button:focus {
        position: relative;
        border: none;
        outline: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #ffffff;
        color: black;
      }
      button:active {
        position: relative;
        border: none;
        display: inline-block;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        transition: 0.25s;
        background-color: #ffffff;
        color: black;
      }
      .text {
        text-decoration: underline;
        text-decoration-color: black;
        color: #5497ce;
      }
    </style>
  </head>
  <body>
    <%-include('../partials/nav.ejs')%>

    <div id="wrapper"> <!-- footer 설정용 -->
    <br/><br/><br/><br/><br/><br/>

      <div class="container" data-aos="fade-up">
        <header class="section-header" style="text-align: center;">
          <h3>공개키 탑재 가이드</h3>
          <hr class="my-4">
          <p style="font-size: 20px;">
            본 가이드는 OpenSSL에 양자내성암호(이하 PQC)를 적용하기 위한 가이드입니다.<br/><br/>
            현재 OpenSSL에 대칭키를 탑재하는 방법은 상당 수 알려져 있으나, 그에 비해 공개키를 탑재하는 방법에 대하여는 알려진 바가 적습니다.<br/>
            따라서 OpenSSL 코드 분석 및 OpenSSL에 PQC를 탑재한 여러 프로젝트, 그리고 논문을 참고하여
            OpenSSL에 공개키를 탑재하는 방법을 작성하였습니다.
            특히나 본 가이드는 다가올 양자 컴퓨터의 시대에 대비하여 OpenSSL에 PQC를 적용하는 것에 집중하고 있습니다.<br/><br/>
            SSL(TLS) 통신에서 PQC를 적용하고자 한다면 두 가지의 가이드가 필요할 것입니다.
            하나는 PQC 서명 알고리즘에 대한 탑재 가이드이고, 하나는 PQC KEM에 대한 탑재 가이드입니다.<br/><br/>
            본 가이드에서는 두 가지 모두 제공합니다.
          </p>
        </header>
      </div>

      <br/><br/>


      <div class="container row" style="float: none; margin: 100 auto;">
        <div class="col-md-3" style="float: none; margin: 0 auto;">
          <div class="card text-center" style="width: 25rem;">
            <div class="card-body">
              <h5 class="card-title">공개키 탑재 가이드</h5>
              <p class="card-text">
                <br/>
                <span class="text">PQC 서명 알고리즘 탑재 가이드</span> 입니다.
                <br/><br/>
              </p>
              <!-- 커스텀 버튼 생성하기-->
              <span data-toggle="collapse" href="#sig" aria-expanded="false" aria-controls="sig">
                <button>&nbsp;gogo!&nbsp;</button>
              </span>
            </div>
          </div>
        </div>
        <div class="col-md-3" style="float: none; margin: 0 auto;">
          <div class="card text-center" style="width: 25rem;">
            <div class="card-body">
              <h5 class="card-title">공개키 탑재 가이드</h5>
              <p class="card-text">
                <br/>
                <span class="text">PQC KEM 탑재 가이드</span> 입니다.
                <br/><br/>
              </p>
              <span data-toggle="collapse" href="#kem" aria-expanded="false" aria-controls="kem">
                <button>&nbsp;gogo!&nbsp;</button>
              </span>
            </div>
          </div>
        </div>
      </div>


      <br/><br/>


      <div class="collapse" id="sig">
        <div class="jumbotron">
          <h1 class="display-5">PQC 서명 알고리즘 탑재 가이드</h1>
          <hr class="my-4">
          <p class="lead">
            <span style="font-size: 25px;">인증서 발급 과정</span><br/><br/>
            OpenSSL에서 SSL 인증서를 발급받는 과정은 다음과 같습니다.<br/>
            &nbsp;&nbsp;1. 서명 알고리즘의 키 쌍을 생성<br/>
            &nbsp;&nbsp;2. 키를 사용해 서버의 정보가 담긴 CSR 파일을 생성, 인증 기관(이하 CA)에 전송<br/>
            &nbsp;&nbsp;3. CA에서 서명 및 인증서 발급, 서버로 전송<br/><br/>
            일반적으로 서명을 할 때 RSA 알고리즘을 사용하기 때문에 위의 과정은 아래의 openssl 명령어로 이루어지게 됩니다.<br/>
            (명령어 : 예시 : 설명)<br/><br/>
            &nbsp;&nbsp;1. genrsa : openssl genrsa -out server.key 2048 : rsa 키 쌍 생성<br/>
            &nbsp;&nbsp;2. req : openssl req -new -key server.key -out server.csr : 키를 사용해 CSR 파일 생성<br/>
            &nbsp;&nbsp;3. x509 : openssl x509 -req -in server.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial out server.crt : CA 키를 통한 서명 및 인증서 생성<br/><br/><br/>
            <span style="font-size: 25px;">첫 번째 구현. PQC 알고리즘 함수</span><br/>
            적용하고자 하는 PQC 알고리즘으로 구현할 함수는 다음 세 가지입니다.<br/><br/>
            &nbsp;&nbsp;1. Key generate<br/>
            &nbsp;&nbsp;2. Sign<br/>
            &nbsp;&nbsp;3. Verify (SSL 통신에서 서버 인증을 위함)<br/><br/><br/>
            <span style="font-size: 25px;">OpenSSL EVP 흐름 분석</span><br/>
            OpenSSL에서는 암호화 함수를 총괄하는 EVP API를 제공합니다.
            서명 암호 알고리즘도 이 EVP API를 이용해서 이루어집니다.
            그 흐름을 도식화하면 다음과 같습니다.<br/><br/>
            <img src="/images/guide/openssl-evp.png"><br/><br/>
            EVP_PKEY_METHOD는 키를 만들기 위한 함수들을 가지고 있는 구조체입니다.
            이 안에는 keygen이라는 함수 포인터도 있는데, 이 함수를 통해서 EVP_PKEY 구조체 안의 pkey.ptr에 특정 구조체의 포인터를 저장하게 됩니다.<br/>
            그 구조체는 적용하고자 하는 알고리즘의 공개키, 비밀키, 그리고 keypair, sign, verify 함수 포인터들로 구성되어 있습니다.<br/>
            이 때, method와 알고리즘의 구조체를 가져오기 위해 nid와 알고리즘의 이름을 사용하게 됩니다.<br/><br/><br/>
            <span style="font-size: 25px;">두 번째 구현. OpenSSL 수정</span><br/>
            따라서 OpenSSL 내에서 구현해야 할 부분은 다음과 같습니다.<br/><br/>
            &nbsp;&nbsp;1. Method: EVP_PKEY_METHOD, EVP_PKEY_ASN1_METHOD<br/>
            &nbsp;&nbsp;2. NID: NID_youralgorithm<br/>
            &nbsp;&nbsp;3. Keygen()<br/>
            &nbsp;&nbsp;4. 알고리즘 이름<br/><br/>
            OpenSSL 내에서 이와 관련된 부분들을 선언 및 정의해야 합니다.<br/>
          </p>
      
        </div>
      </div>


      <div class="collapse" id="kem">
        <div class="jumbotron">
          <h1 class="display-5">PQC KEM 탑재 가이드</h1>
          <hr class="my-4">
          <p class="lead">
            TLS 1.3에선 키교환에 있어 기본적으로 ECDHE 알고리즘을 사용하고 있습니다.
            그런데, 이 DH 방식은 KEM 방식과 달라 DH의 context를 그대로 쓰기 힘듭니다.<br/>
            따라서 SSL 구조체의 수정이 필요합니다.
            PQC의 키를 담을 수 있는 포인터 변수를 SSL 구조체의 s3 안에 선언해주어야 합니다.<br/><br/>
            <span style="font-size: 25px;">첫 번째 구현. SSL 구조체 수정</span><br/><br/>
            SSL 구조체 내의 s3 안에 pqc를 위한 변수들을 선언해 주어야 합니다.<br/><br/>
            <img src="/images/guide/pqc-kem1.png"><br/><br/>
            위 사진은 TLS 1.3 핸드셰이킹 과정에서 client hello 메시지를 캡처한 화면입니다.<br/>
            TLS 1.3은 extension에 정보가 담겨 있습니다. Extension에서 key_share 부분이 키 교환 할 때에 공유하는 값입니다.<br/><br/>
            <img src="/images/guide/pqc-kem2.png"><br/><br/>
            좀 더 자세히 보시면 x25519라는 그룹이 사용되는 것을 볼 수 있습니다.
            이 그룹은 supported_groups extension에 있는 그룹 리스트에서 확인할 수 있습니다. <br/><br/>
            <img src="/images/guide/pqc-kem3.png"><br/><br/>
            즉, kem을 적용하고자 한다면 shared_key를 통해 client hello 메시지에서 kem의 공개키를 보낼 필요가 있습니다.<br/><br/>
            <span style="font-size: 25px;">두 번째 구현. Client Hello를 위한 구현</span><br/><br/>
            그러므로 다음 부분의 수정 및 구현이 필요합니다.<br/><br/>
            &nbsp;&nbsp;1. Supported group을 kem의 nid로 설정해주는 코드<br/>
            &nbsp;&nbsp;2. 패킷의 Key_shared extension 부분을 조직할 때 kem의 공개키를 생성해서 패킷에 넣어주는 코드<br/><br/>
            <span style="font-size: 25px;">세 번째 구현. 그 외 필요한 구현</span><br/><br/>
            위 두 개 부분이 kem의 핵심 구현이고 그 밖에도 다음의 부분을 구현 및 수정해야 합니다.<br/><br/>
            &nbsp;&nbsp;1. Kem nid 및 알고리즘 이름 선언<br/>
            &nbsp;&nbsp;2. Kem encaps, decaps, gen_key 함수 구현<br/>
            &nbsp;&nbsp;3. Kem 구조체 선언<br/>
          </p>
      
        </div>
      </div>




    </div>

    <br/><br/><br/><br/>

    <%-include('../partials/footer.ejs')%>
  </body>
</html>